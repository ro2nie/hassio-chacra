
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

input_select:
  water_well_recover_time:
    name: Water well recovery time
    options:
      - 1
      - 5
      - 10
      - 20
      - 30
      - 40
      - 50
      - 60
      - 70
      - 80
      - 90
      - 100
      - 120
      - 130
      - 140
      - 150
      - 160
      - 180
      - 190
      - 200
    # If initial is not specified, it should remember the value specified even after restarts
    # initial: 30
    icon: mdi:clock

# Water pump will continuously send ON status messages //TODO implement this in wemos pump
binary_sensor:
  - platform: mqtt
    name: "Water pump availability"
    state_topic: "water-pump/availability"
    payload_on: "ON"
    expire_after: 10
  # Water tank will continuously send ON status messages //TODO implement this in wemos tank
  - platform: mqtt
    name: "Water tank availability"
    state_topic: "water-tank/availability"
    payload_on: "ON"
    expire_after: 10

switch:
  - platform: mqtt
    name: "Water tank intent"
    state_topic: "water-tank/status"
    command_topic: "water-tank/status"
    payload_on: "ON"
    payload_off: "OFF"
    state_on: "ON"
    state_off: "OFF"
    retain: true

sensor:
  - platform: template
    sensors:
      water_tank_height:
        value_template: !secret water_tank_height
      water_tank_sensor_error_adjustment:
        value_template: !secret water_tank_sensor_error_adjustment
      water_tank_cylinder_height:
        value_template: !secret water_tank_cylinder_height
      water_tank_cylinder_radius:
        value_template: !secret water_tank_cylinder_radius
      water_tank_cone_angle:
        value_template: !secret water_tank_cone_angle
  # - platform: mqtt
  #   name: "RSSI"
  #   state_topic: "water-tank/level"
  #   unit_of_measurement: 'dBm'
  #   value_template: "{{ value_json.rssi }}"
  #   icon: mdi:signal-cellular-3
  # - platform: mqtt
  #   name: "sequence"
  #   state_topic: "water-tank/level"
  #   value_template: "{{ value_json.sequence }}"
  - platform: mqtt
    name: "Water pump status"
    state_topic: "water-pump/status"
  - platform: mqtt
    name: "Water distance top"
    state_topic: "water-tank/level"
    unit_of_measurement: 'cm'
    value_template: "{{ value_json.tank }}"
  - platform: template
    sensors:
      water_level:
        friendly_name: "Water level"
        unit_of_measurement: 'cm'
        value_template: >-
          {% set water_tank_height = states('sensor.water_tank_height') | float %}
          {% set water_tank_sensor_error_adjustment = states('sensor.water_tank_sensor_error_adjustment') | float %}
          {% set water_level = states('sensor.water_level') | float %}
          {% set water_distance_top = states('sensor.water_distance_top') | float %}
          {% set water_level = water_tank_height + water_tank_sensor_error_adjustment - water_distance_top %}
          {% if water_level < 0 %}
            {{ 0.0 }}
          {% else %}
            {{ water_level | round(2) }}
          {% endif %}
        icon_template: >-
          mdi:tape-measure
      water_percentage:
        friendly_name: "Water percentage"
        unit_of_measurement: '%'
        value_template: >-
          {% set water_tank_height = states('sensor.water_tank_height') | float %}
          {% set water_level = states('sensor.water_level') | float %}
          {% set percentage = (water_level / water_tank_height) * 100 %}
          {% if percentage < 0 %}
            {{ 0.0 }}
          {% else %}
            {{ percentage | round(2) }}
          {% endif %}
        icon_template: >-
          mdi:water-percent
      water_volume:
        friendly_name: "Water volume"
        unit_of_measurement: 'litres'
        value_template: >-
          {% set water_level = states('sensor.water_level') | float %}
          {% set water_tank_cylinder_height = states('sensor.water_tank_cylinder_height') | float %}
          {% set water_tank_cylinder_radius = states('sensor.water_tank_cylinder_radius') | float %}
          {% if water_level <= water_tank_cylinder_height %}
            {% set cylinder_volume = pi * water_tank_cylinder_radius ** 2 * water_level %}
            {{ (cylinder_volume / 1000) | round(2) }}
          {% else %}
            {% set cylinder_volume = pi * water_tank_cylinder_radius ** 2 * water_tank_cylinder_height %}
            {% set water_tank_cone_angle = states('sensor.water_tank_cone_angle') | float %}
            {% set water_height_in_cone = water_level - water_tank_cylinder_height %}
            {% set tan_from_degrees = tan((pi / 180) * water_tank_cone_angle) %}
            {% set water_level_radius_in_cone = water_tank_cylinder_radius - (water_height_in_cone / tan_from_degrees) %}
            {% set volume_cone = (1/3 * pi * (water_tank_cylinder_radius ** 2 + water_tank_cylinder_radius + water_level_radius_in_cone + water_level_radius_in_cone ** 2) * water_height_in_cone) %}
            {{ ((cylinder_volume + volume_cone) / 1000) | round(2)}}
          {% endif %}
        icon_template: >-
          mdi:water
      water_tank_intent:
        friendly_name: 'Water tank intent'
        # If water percentage is 41, it will continue as ON, until it hits 95%.
        # This is so that if the water level is coming down, it won't switch on immediately at 94%
        # The explicit else would equate to 'maintain whichever state was last set'.
        value_template: >-
          {% set water_tank_percentage = states('sensor.water_percentage') | float %}
          {% set intent = states('sensor.water_tank_intent') %}
          {% if water_tank_percentage <= 40 %}
            {{ true }}
          {% elif water_tank_percentage >= 95 %}
            {{ false }}
          {% else %}
            {{ intent }}
          {% endif %}
        icon_template: >-
          mdi:flash
      water_tank_availability_display:
        friendly_name: "Water tank availability"
        value_template: >-
          {% set water_tank_availability = states('binary_sensor.water_tank_availability') %}
          {% if water_tank_availability == 'on' %}
            Online
          {% else %}
            Offline
          {% endif %}
      water_pump_availability_display:
        friendly_name: "Water pump availability"
        value_template: >-
          {% set water_pump_availability = states('binary_sensor.water_pump_availability') %}
          {% if water_pump_availability == 'on' %}
            Online
          {% else %}
            Offline
          {% endif %}
      water_well_recovery_countdown_display:
        friendly_name: "Water well recovery countdown"
        unit_of_measurement: 'min'
        value_template: >-
          {% set water_well_recovery_countdown = states('sensor.water_well_recovery_countdown') | int %}
          {% if water_well_recovery_countdown == 0 %}
            less than 1
          {% else %}
            {{ water_well_recovery_countdown }}
          {% endif %}
        icon_template: mdi:clock
  - platform: mqtt
    name: "Water well recovery countdown"
    state_topic: "water-well/recovery-countdown"
    unit_of_measurement: 'min'
    icon: mdi:clock
  - platform: template
    sensors:
      solar_angle:
        friendly_name: "Sun angle"
        unit_of_measurement: 'degrees'
        value_template: "{{ state_attr('sun.sun', 'elevation') }}"
      sunrise:
        value_template: "{{ state_attr('sun.sun', 'next_rising') }}"
