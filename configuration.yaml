
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

homeassistant:
  allowlist_external_dirs:
    - /config

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

sun:
  - elevation: 462

input_boolean:
  holiday_mode:
    name: Holiday mode
    icon: mdi:beach
    # initial: off

input_select:
  water_well_recover_time:
    name: Set recovery time
    options:
      - 1
      - 5
      - 10
      - 20
      - 30
      - 40
      - 50
      - 60
      - 70
      - 80
      - 90
      - 100
      - 120
      - 130
      - 140
      - 150
      - 160
      - 180
      - 190
      - 200
    # If initial is not specified, it should remember the value specified even after restarts
    # initial: 30
    icon: mdi:clock

  # Allows user to set the interval for the water level ultrasonic sensor readings for when the water pump
  # is NOT pumping water.
  # Notice that we do not provide a similar select for when the water pump is pumping water. This is so that
  # we do not en up with an overflowing water tank in case this is wrongly set. The default is set in the
  # arduino board (10 second interval for when water pump is on).
  water_tank_level_sensor_interval_not_pumping:
    name: Set interval for when pump is off
    options:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 10
      - 20
      - 30
      - 40
      - 50
      - 60
      - 70
      - 80
      - 90
      - 100
      - 120
      - 130
      - 140
      - 150
      - 160
      - 180
      - 190
      - 200
    icon: mdi:clock
    
  frost_prevention_cutoff_temperature:
    name: Set minimum operational temperature (frost prevention)
    options:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
    icon: mdi:temperature
    
## If the current temperature is bellow this, the tank will not let the level go under 81%
## This is good for preparation for temperatures that might be approaching frost levels
## As it will keep the tank fully stocked up should the pump stop working due to frost.
## This could also be beneficial in summer if the risk of fires is high. In which case the set temperature
## here should be set high.
  keep_tank_levels_high_cutoff_temperature:
    name: Set max temp at which tank should keep level high
    options:
      - 10
      - 15
      - 20
      - 25
      - 30
      - 35
      - 40
      - 45
    icon: mdi:temperature
    
binary_sensor:
  - platform: mqtt
    name: "Water pump availability"
    state_topic: "water-pump/availability"
    payload_on: "ON"
    expire_after: 10
  - platform: mqtt
    name: "Water tank availability"
    state_topic: "water-tank/availability"
    payload_on: "ON"
    expire_after: 10

switch:
  - platform: mqtt
    name: "Water tank intent"
    state_topic: "water-tank/status"
    command_topic: "water-tank/status"
    payload_on: "ON"
    payload_off: "OFF"
    state_on: "ON"
    state_off: "OFF"
    retain: true

sensor:
  - platform: statistics
    name: "Litres per hour"
    entity_id: sensor.water_volume
    state_characteristic: change
    max_age:
      hours: 1
    sampling_size: 10
    precision: 1

  - platform: filesize
    file_paths:
      - /config/home-assistant_v2.db

  - platform: template
    sensors:
      water_tank_height:
        value_template: !secret water_tank_height
      water_tank_sensor_error_adjustment:
        value_template: !secret water_tank_sensor_error_adjustment
      water_tank_cylinder_height:
        value_template: !secret water_tank_cylinder_height
      water_tank_cylinder_radius:
        value_template: !secret water_tank_cylinder_radius
      water_tank_cone_angle:
        value_template: !secret water_tank_cone_angle
  
  - platform: mqtt
    name: "Water well status"
    state_topic: "water-well/status"
  
  - platform: mqtt
    name: "Water pump status"
    state_topic: "water-pump/status"
  
  - platform: mqtt
    name: "Water distance top"
    state_topic: "water-tank/level"
    unit_of_measurement: 'cm'

  ## WHEATHER well/pump
  - platform: mqtt
    name: "Water well temperature"
    state_topic: "water-well/weather"
    unit_of_measurement: 'Â°C'
    value_template: "{{ value_json.temperature }}"

  - platform: mqtt
    name: "Water well relative humidity"
    state_topic: "water-well/weather"
    unit_of_measurement: '%'
    value_template: "{{ value_json.humidity | round(2) }}"

  - platform: mqtt
    name: "Water well pressure"
    state_topic: "water-well/weather"
    unit_of_measurement: 'hPa'
    value_template: "{{ value_json.pressure | round(2) }}"

  - platform: mqtt
    name: "Water well altitude"
    state_topic: "water-tank/weather"
    unit_of_measurement: 'm'
    value_template: "{{ value_json.altitude | round(2) }}"
    
  ## WHEATHER tank
  - platform: mqtt
    name: "Water tank temperature"
    state_topic: "water-tank/weather"
    unit_of_measurement: 'Â°C'
    value_template: "{{ value_json.temperature }}"

  - platform: mqtt
    name: "Water tank relative humidity"
    state_topic: "water-tank/weather"
    unit_of_measurement: '%'
    value_template: "{{ value_json.humidity | round(2) }}"

  - platform: mqtt
    name: "Water tank pressure"
    state_topic: "water-tank/weather"
    unit_of_measurement: 'hPa'
    value_template: "{{ value_json.pressure | round(2) }}"

  - platform: mqtt
    name: "Water tank altitude"
    state_topic: "water-tank/weather"
    unit_of_measurement: 'm'
    value_template: "{{ value_json.altitude | round(2) }}"

  - platform: template
    sensors:
      water_level:
        friendly_name: "Water level"
        unit_of_measurement: 'cm'
        value_template: >-
          {% set water_tank_height = states('sensor.water_tank_height') | float %}
          {% set water_level = states('sensor.water_level') | float %}
          {% set water_distance_top = states('sensor.water_distance_top') | float %}
          {% set water_level = water_tank_height - water_distance_top %}
          {% if water_level < 0 %}
            {{ 0.0 }}
          {% else %}
            {{ water_level | round(2) }}
          {% endif %}
        icon_template: >-
          mdi:tape-measure
      water_percentage:
        friendly_name: "Water percentage"
        unit_of_measurement: '%'
        value_template: >-
          {% set water_tank_height = states('sensor.water_tank_height') | float %}
          {% set water_level = states('sensor.water_level') | float %}
          {% set water_tank_sensor_error_adjustment = states('sensor.water_tank_sensor_error_adjustment') | float %}
          {% set percentage = (water_level / (water_tank_height - water_tank_sensor_error_adjustment)) * 100 %}
          {% if percentage < 0 %}
            {{ 0.0 }}
          {% else %}
            {{ percentage | round(2) }}
          {% endif %}
        icon_template: >-
          mdi:water-percent
      water_volume:
        friendly_name: "Water volume"
        unit_of_measurement: 'litres'
        value_template: >-
          {% set water_level = states('sensor.water_level') | float %}
          {% set water_tank_cylinder_height = states('sensor.water_tank_cylinder_height') | float %}
          {% set water_tank_cylinder_radius = states('sensor.water_tank_cylinder_radius') | float %}
          {% if water_level <= water_tank_cylinder_height %}
            {% set cylinder_volume = pi * water_tank_cylinder_radius ** 2 * water_level %}
            {{ (cylinder_volume / 1000) | round(2) }}
          {% else %}
            {% set cylinder_volume = pi * water_tank_cylinder_radius ** 2 * water_tank_cylinder_height %}
            {% set water_tank_cone_angle = states('sensor.water_tank_cone_angle') | float %}
            {% set water_height_in_cone = water_level - water_tank_cylinder_height %}
            {% set tan_from_degrees = tan((pi / 180) * water_tank_cone_angle) %}
            {% set water_level_radius_in_cone = water_tank_cylinder_radius - (water_height_in_cone / tan_from_degrees) %}
            {% set volume_cone = (1/3 * pi * (water_tank_cylinder_radius ** 2 + water_tank_cylinder_radius + water_level_radius_in_cone + water_level_radius_in_cone ** 2) * water_height_in_cone) %}
            {{ ((cylinder_volume + volume_cone) / 1000) | round(2)}}
          {% endif %}
        icon_template: >-
          mdi:water
      water_tank_availability_display:
        friendly_name: "Water tank availability"
        value_template: >-
          {% set water_tank_availability = states('binary_sensor.water_tank_availability') %}
          {% if water_tank_availability == 'on' %}
            Online
          {% else %}
            Offline
          {% endif %}
      water_pump_availability_display:
        friendly_name: "Water pump availability"
        value_template: >-
          {% set water_pump_availability = states('binary_sensor.water_pump_availability') %}
          {% if water_pump_availability == 'on' %}
            Online
          {% else %}
            Offline
          {% endif %}
      water_pump_temperature_bellow_keep_tank_level_high:
        friendly_name: "Water pump temperature bellow the 'keep tank level high' temperature"
        value_template: >-
          {% set lowest_temperature = states('sensor.temperature_lowest_tank_or_pump') | float %}
          {% set keep_tank_levels_high_cutoff_temperature = states('input_select.keep_tank_levels_high_cutoff_temperature') | float %}
          {% if states('sensor.temperature_lowest_tank_or_pump') == 'unknown' %}
            {{ states('sensor.temperature_lowest_tank_or_pump') }}
          {% elif lowest_temperature < keep_tank_levels_high_cutoff_temperature %}
            {{ True }}
          {% else %}
            {{ False }}
          {% endif %}
        icon_template: >-
          mdi:thermometer
      water_pump_temperature_bellow_frost_prevention_cutoff:
        friendly_name: "Water pump temperature bellow frost prevention cut off temperature"
        value_template: >-
          {% set lowest_temperature = states('sensor.temperature_lowest_tank_or_pump') | float %}
          {% set frost_prevention_cutoff_temperature = states('input_select.frost_prevention_cutoff_temperature') | float %}
          {% if states('sensor.temperature_lowest_tank_or_pump') == 'unknown' %}
            {{ states('sensor.temperature_lowest_tank_or_pump') }}
          {% elif lowest_temperature < frost_prevention_cutoff_temperature %}
            {{ True }}
          {% else %}
            {{ False }}
          {% endif %}
        icon_template: >-
          mdi:thermometer
      temperature_average_tank_pump:
        friendly_name: "Averaged temperature tank/pump"
        unit_of_measurement: 'Â°C'
        value_template: >-
          {% set water_pump_temperature = states('sensor.water_well_temperature') | float %}
          {% set water_tank_temperature = states('sensor.water_tank_temperature') | float %}
          {% if states('sensor.water_well_temperature') == 'unknown' or states('sensor.water_tank_temperature') == 'unknown' %}
            {{ states('sensor.water_well_temperature') }}
          {% else %}
            {{ ((water_pump_temperature + water_tank_temperature) / 2) | round(2)}}
          {% endif %}
        icon_template: >-
          mdi:thermometer
      temperature_lowest_tank_or_pump:
        friendly_name: "Lowest temperature tank/pump"
        unit_of_measurement: 'Â°C'
        value_template: >-
          {% set water_pump_temperature = states('sensor.water_well_temperature') | float %}
          {% set water_tank_temperature = states('sensor.water_tank_temperature') | float %}
          {% if states('sensor.water_well_temperature') == 'unknown' or states('sensor.water_tank_temperature') == 'unknown' %}
            {{ states('sensor.water_well_temperature') }}
          {% elif water_pump_temperature < water_tank_temperature %}
            {{ water_pump_temperature }}
          {% else %}
            {{ water_tank_temperature }}
          {% endif %}
        icon_template: >-
          mdi:thermometer
      humidity_average_tank_pump:
        friendly_name: "Averaged relative humidity tank/pump"
        unit_of_measurement: '%'
        value_template: >-
          {% set water_pump_humidity = states('sensor.water_well_relative_humidity') | float %}
          {% set water_tank_humidity = states('sensor.water_tank_relative_humidity') | float %}
          {% if states('sensor.water_well_relative_humidity') == 'unknown' or states('sensor.water_tank_relative_humidity') == 'unknown' %}
            {{ states('sensor.water_well_relative_humidity') }}
          {% else %}
            {{ ((water_pump_humidity + water_tank_humidity) / 2) | round(2)}}
          {% endif %}
        icon_template: >-
          mdi:percent
      pressure_average_tank_pump:
        friendly_name: "Averaged pressure tank/pump"
        unit_of_measurement: 'hPa'
        value_template: >-
          {% set water_pump_pressure = states('sensor.water_well_pressure') | float %}
          {% set water_tank_pressure = states('sensor.water_tank_pressure') | float %}
          {% if states('sensor.water_well_pressure') == 'unknown' or states('sensor.water_tank_pressure') == 'unknown' %}
            {{ states('sensor.water_well_pressure') }}
          {% else %}
            {{ ((water_pump_pressure + water_tank_pressure) / 2) | round(2) }}
          {% endif %}
        icon_template: >-
          mdi:weather-cloudy-arrow-right
  - platform: mqtt
    name: "Water well recovery countdown"
    state_topic: "water-well/recovery-countdown"
    unit_of_measurement: 'min'
    icon: mdi:clock
  - platform: template
    sensors:
      solar_angle:
        friendly_name: "Sun angle"
        unit_of_measurement: 'degrees'
        value_template: "{{ state_attr('sun.sun', 'elevation') }}"
      sunrise:
        value_template: "{{ state_attr('sun.sun', 'next_rising') }}"

  - platform: integration
    source: sensor.water_volume

# Calculates litres per hr rate
utility_meter:
  water_rate:
    source: sensor.water_volume
    cycle: daily
    name: "Litres Today"
    net_consumption: True
    offset: 00:00

telegram_bot:
  - platform: polling
    api_key: !secret telegram_api_key
    allowed_chat_ids:
      - !secret telegram_allowed_chat_id

notify:
  - name: telegram
    platform: telegram
    chat_id: !secret telegram_allowed_chat_id

# TODO
# Change icons. Have icons that react on availability Offline and Online


#TODO try {{ is_state('switch.source', 'on') }} instead of {% if water_tank_availability == 'on'%}

recorder:
  purge_keep_days: 7   # Keep 1 week in history after purging @ 04:12
  commit_interval: 30   # Write to disk every 30 seconds
  exclude:
    domains:
      - automation
      - weblink
      - updater
      - persistent_notification
      - media_player

