# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

homeassistant:
  allowlist_external_dirs:
    - /config

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

sun:
  - elevation: 462

input_boolean:
  holiday_mode:
    name: Holiday mode
    icon: mdi:beach
    # initial: off

input_select:
  water_well_recover_time:
    name: Set recovery time
    options:
      - 1
      - 5
      - 10
      - 20
      - 30
      - 40
      - 50
      - 60
      - 70
      - 80
      - 90
      - 100
      - 120
      - 130
      - 140
      - 150
      - 160
      - 180
      - 190
      - 200
    # If initial is not specified, it should remember the value specified even after restarts
    # initial: 30
    icon: mdi:clock

  # Allows user to set the interval for the water level ultrasonic sensor readings for when the water pump
  # is NOT pumping water.
  # Notice that we do not provide a similar select for when the water pump is pumping water. This is so that
  # we do not en up with an overflowing water tank in case this is wrongly set. The default is set in the
  # arduino board (10 second interval for when water pump is on).
  water_tank_level_sensor_interval_not_pumping:
    name: Set interval for when pump is off
    options:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 10
      - 20
      - 30
      - 40
      - 50
      - 60
      - 70
      - 80
      - 90
      - 100
      - 120
      - 130
      - 140
      - 150
      - 160
      - 180
      - 190
      - 200
    icon: mdi:clock

  water_tank_level_lower_limit_percentage:
    name: Set lower limit at which to start water tank intent
    options:
      - 40
      - 45
      - 50
      - 55
      - 60
      - 65
      - 70
      - 75
      - 80
      - 85
    icon: mdi:clock

  water_tank_level_upper_limit_percentage:
    name: Set upper limit at which to stop water tank intent
    options:
      - 90
      - 91
      - 92
      - 93
      - 94
      - 95
      - 96
      - 97
      - 98
      - 99
      - 100
    icon: mdi:clock
    
  frost_prevention_cutoff_temperature:
    name: Set minimum operational temperature (frost prevention)
    options:
      - -8
      - -7
      - -6
      - -5
      - -4
      - -3
      - -2
      - -1
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
    icon: mdi:temperature

mqtt:
  switch:
    - name: "Water tank intent"
      state_topic: "water-tank/status"
      command_topic: "water-tank/status"
      payload_on: "ON"
      payload_off: "OFF"
      state_on: "ON"
      state_off: "OFF"
      retain: true

  binary_sensor:
    - name: "Water pump availability"
      state_topic: "water-pump/availability"
      payload_on: "ON"
      expire_after: 120

    - name: "Water tank availability"
      state_topic: "water-tank/availability"
      payload_on: "ON"
      expire_after: 120

  sensor:
    - name: "homeassistant status"
      state_topic: "homeassistant/status"
  
    # FULL or EMPTY
    - name: "Water well status"
      state_topic: "water-well/status"
      value_template: "{{ value if value is defined else this.state }}"

    # ON or OFF (ON is pumping. OFF is for not pumping)
    - name: "Water pump status"
      state_topic: "water-pump/status"
      value_template: "{{ value if value is defined else this.state }}"

    ## WEATHER well/pump
    - name: "Water well temperature"
      state_topic: "water-well/weather"
      unit_of_measurement: 'Â°C'
      value_template: "{{ value_json.temperature }}"

    - name: "Water well relative humidity"
      state_topic: "water-well/weather"
      unit_of_measurement: '%'
      value_template: "{{ value_json.humidity | round(2) }}"

    - name: "Water well pressure"
      state_topic: "water-well/weather"
      unit_of_measurement: 'hPa'
      value_template: "{{ value_json.pressure | round(2) }}"

    - name: "Water well altitude"
      state_topic: "water-tank/weather"
      unit_of_measurement: 'm'
      value_template: "{{ value_json.altitude | round(2) }}"

    ## WEATHER tank
    - name: "Water distance top"
      state_topic: "water-tank/level"
      unit_of_measurement: 'cm'
      value_template: "{{ value if value is defined else this.state }}"

    - name: "Water tank temperature"
      state_topic: "water-tank/weather"
      unit_of_measurement: 'Â°C'
      value_template: "{{ value_json.temperature if value_json.temperature is defined else this.state }}"

    - name: "Water tank relative humidity"
      state_topic: "water-tank/weather"
      unit_of_measurement: '%'
      value_template: "{{ value_json.humidity | round(2) }}"

    - name: "Water tank pressure"
      state_topic: "water-tank/weather"
      unit_of_measurement: 'hPa'
      value_template: "{{ value_json.pressure | round(2) }}"

    - name: "Water tank altitude"
      state_topic: "water-tank/weather"
      unit_of_measurement: 'm'
      value_template: "{{ value_json.altitude | round(2) }}"

    - name: "Water well recovery countdown"
      state_topic: "water-well/recovery-countdown"
      unit_of_measurement: 'min'
      value_template: "{{ value if value is defined else this.state }}"
      icon: mdi:clock

sensor:
  - platform: statistics
    name: "Litres per hour"
    entity_id: sensor.water_volume
    state_characteristic: change
    max_age:
      hours: 1
    sampling_size: 10
    precision: 1

  - platform: filesize
    file_paths:
      - /config/home-assistant_v2.db

input_text:
  water_tank_height:
    initial: !secret water_tank_height
  water_tank_sensor_error_adjustment:
    initial: !secret water_tank_sensor_error_adjustment
  water_tank_cylinder_height:
    initial: !secret water_tank_cylinder_height
  water_tank_cylinder_radius:
    initial: !secret water_tank_cylinder_radius
  water_tank_cone_angle:
    initial: !secret water_tank_cone_angle
  
template:
  - binary_sensor:
    - name: under_water_percentage_upper_limit
      state: >
        {% set water_percentage = states('sensor.water_percentage') | float %}
        {% set water_percentage_upper_level = states('input_select.water_tank_level_upper_limit_percentage') | int %}
        {{ water_percentage <= water_percentage_upper_level }}
    - name: over_water_percentage_lower_limit
      state: >
        {% set water_percentage = states('sensor.water_percentage') | float %}
        {% set water_percentage_lower_level = states('input_select.water_tank_level_lower_limit_percentage') | int %}
        {{ water_percentage >= water_percentage_lower_level }}
  - sensor:
    - name: "Water level"
      unit_of_measurement: "cm"
      state: >
        {% set water_tank_height = states('input_text.water_tank_height') | float(default=0) %}
        {% set water_distance_top = states('sensor.water_distance_top') | float(default=0) %}
        {% set water_level = water_tank_height - water_distance_top %}
        {% if water_level < 0 %}
          {{ 0.0 }}
        {% else %}
          {{ water_level | round(2) }}
        {% endif %}
      icon: mdi:tape-measure
    - name: "Water percentage"
      unit_of_measurement: "%"
      state: >
        {% set water_tank_height = states('input_text.water_tank_height') | float(default=175) %}
        {% set water_level = states('sensor.water_level') | float(default=175) %}
        {% set water_tank_sensor_error_adjustment = states('input_text.water_tank_sensor_error_adjustment') | float %}
        {% set percentage = (water_level / (water_tank_height - water_tank_sensor_error_adjustment)) * 100 %}
        {% if percentage < 0 %}
          {{ 0.0 }}
        {% elif percentage > 100 %}
          {{ 100.0 }}
        {% else %}
          {{ percentage | round(2) }}
        {% endif %}
      icon: mdi:water-percent
    - name: "Water volume"
      unit_of_measurement: "litres"
      state: >
        {% set water_level = states('sensor.water_level') | float(default=175) %}
        {% set water_tank_cylinder_height = states('input_text.water_tank_cylinder_height') | float %}
        {% set water_tank_cylinder_radius = states('input_text.water_tank_cylinder_radius') | float %}
        {% if water_level <= water_tank_cylinder_height %}
          {% set cylinder_volume = pi * water_tank_cylinder_radius ** 2 * water_level %}
          {{ (cylinder_volume / 1000) | round(2) }}
        {% else %}
          {% set cylinder_volume = pi * water_tank_cylinder_radius ** 2 * water_tank_cylinder_height %}
          {% set water_tank_cone_angle = states('input_text.water_tank_cone_angle') | float %}
          {% set water_height_in_cone = water_level - water_tank_cylinder_height %}
          {% set tan_from_degrees = tan((pi / 180) * water_tank_cone_angle) %}
          {% set water_level_radius_in_cone = water_tank_cylinder_radius - (water_height_in_cone / tan_from_degrees) %}
          {% set volume_cone = (1/3 * pi * (water_tank_cylinder_radius ** 2 + water_tank_cylinder_radius + water_level_radius_in_cone + water_level_radius_in_cone ** 2) * water_height_in_cone) %}
          {{ ((cylinder_volume + volume_cone) / 1000) | round(2)}}
        {% endif %}
      icon: mdi:water
    - name: "Water tank availability state"
      state: >
        {% set water_tank_availability = states('binary_sensor.water_tank_availability') %}
        {% if water_tank_availability == 'on' %}
          Online
        {% else %}
          Offline
        {% endif %}
    - name: "Water pump availability state"
      state: >
        {% set water_pump_availability = states('binary_sensor.water_pump_availability') %}
        {% if water_pump_availability == 'on' %}
          Online
        {% else %}
          Offline
        {% endif %}
    - name: water_pump_temperature_bellow_frost_prevention_cutoff
      state: >
        {% set current_temperature = state_attr('weather.pinos_del_rey', 'temperature') | float(default=20) %}
        {% set frost_prevention_cutoff_temperature = states('input_select.frost_prevention_cutoff_temperature') | float %}
        {% if current_temperature < frost_prevention_cutoff_temperature %}
          {{ True }}
        {% else %}
          {{ False }}
        {% endif %}
      icon: mdi:thermometer
    - name: "Sun angle"
      unit_of_measurement: "degrees"
      state: "{{ state_attr('sun.sun', 'elevation') }}"
    - name: "Sunrise"
      state: "{{ state_attr('sun.sun', 'next_rising') }}"

  # - platform: integration
  #   source: sensor.water_volume

# Calculates litres per hr rate
utility_meter:
  water_rate:
    source: sensor.water_volume
    cycle: daily
    name: "Litres Today"
    net_consumption: True
    offset: 00:00

telegram_bot:
  - platform: polling
    api_key: !secret telegram_api_key
    allowed_chat_ids:
      - !secret telegram_allowed_chat_id

notify:
  - name: telegram
    platform: telegram
    chat_id: !secret telegram_allowed_chat_id

#TODO try {{ is_state('switch.source', 'on') }} instead of {% if water_tank_availability == 'on'%}

recorder:
  purge_keep_days: 2   # Keep 1 week in history after purging @ 04:12
  commit_interval: 60   # Write to disk every 30 seconds
