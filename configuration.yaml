
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

sensor:
  - platform: template
    sensors:
      water_tank_height:
        value_template: !secret water_tank_height
      water_tank_sensor_error_adjustment:
        value_template: !secret water_tank_sensor_error_adjustment
      water_tank_cylinder_height:
        value_template: !secret water_tank_cylinder_height
      water_tank_cylinder_radius:
        value_template: !secret water_tank_cylinder_radius
      water_tank_cone_angle:
        value_template: !secret water_tank_cone_angle
  - platform: mqtt
    name: "RSSI"
    state_topic: "water-tank/level"
    unit_of_measurement: 'dBm'
    value_template: "{{ value_json.rssi }}"
  - platform: mqtt
    name: "sequence"
    state_topic: "water-tank/level"    
    value_template: "{{ value_json.sequence }}"
  - platform: mqtt
    name: "Water distance top"
    state_topic: "water-tank/level"
    unit_of_measurement: 'cm'
    value_template: "{{ value_json.tank }}"
  - platform: template
    sensors:
      water_level:
        friendly_name: "Water level"
        unit_of_measurement: 'cm'
        value_template: >-
          {% set water_tank_height = states('sensor.water_tank_height') | float %}
          {% set water_tank_sensor_error_adjustment = states('sensor.water_tank_sensor_error_adjustment') | float %}
          {% set water_level = states('sensor.water_level') | float %}
          {% set water_distance_top = states('sensor.water_distance_top') | float %}
          {% set water_level = water_tank_height + water_tank_sensor_error_adjustment - water_distance_top %}
          {% if water_level < 0 %}
            {{ 0.0 }}
          {% else %}
            {{ water_level }}
          {% endif %}
      water_percentage:
        friendly_name: "Water percentage"
        unit_of_measurement: '%'
        value_template: >-
          {% set water_tank_height = states('sensor.water_tank_height') | float %}
          {% set water_level = states('sensor.water_level') | float %}
          {% set percentage = (water_level / water_tank_height) * 100 %}
          {% if percentage < 0 %}
            {{ 0.0 }}
          {% else %}
            {{ percentage }}
          {% endif %}
      water_volume:
        friendly_name: "Water percentage"
        unit_of_measurement: 'l'
        value_template: >-
          {% set water_level = states('sensor.water_level') | float %}
          {% set water_tank_cylinder_height = states('sensor.water_tank_cylinder_height') | float %}
          {% set water_tank_cylinder_radius = states('sensor.water_tank_cylinder_radius') | float %}
          {% if water_level <= water_tank_cylinder_height %}
            {% set cylinder_volume = pi * water_tank_cylinder_radius ** 2 * water_level %}
            {{ cylinder_volume / 1000 | round(2) }}
          {% else %}
            {% set cylinder_volume = pi * water_tank_cylinder_radius ** 2 * water_tank_cylinder_height %}
            {% set water_tank_cone_angle = states('sensor.water_tank_cone_angle') | float %}
            {% set water_height_in_cone = water_level - water_tank_cylinder_height %}
            {% set tan_from_degrees = tan((pi / 180) * water_tank_cone_angle) %}
            {% set water_level_radius_in_cone = water_tank_cylinder_radius - (water_height_in_cone / tan_from_degrees) %}
            {% set volume_cone = (1/3 * pi * (water_tank_cylinder_radius ** 2 + water_tank_cylinder_radius + water_level_radius_in_cone + water_level_radius_in_cone ** 2) * water_height_in_cone) %}
            {{ (cylinder_volume + volume_cone) / 1000 | round(2)}}
          {% endif %}
  - platform: template
    sensors:
      solar_angle:
        friendly_name: "Sun angle"
        unit_of_measurement: 'degrees'
        value_template: "{{ state_attr('sun.sun', 'elevation') }}"
      sunrise:
        value_template: "{{ state_attr('sun.sun', 'next_rising') }}"
